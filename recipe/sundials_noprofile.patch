diff --git a/inst/include/sundials/sundials_config.h b/inst/include/sundials/sundials_config.h
index 6f1b0e4..fe591ca 100644
--- a/inst/include/sundials/sundials_config.h
+++ b/inst/include/sundials/sundials_config.h
@@ -77,10 +77,6 @@
  */
 #define SUNDIALS_USE_GENERIC_MATH

-/* Use POSIX timers if available.
- *     #define SUNDIALS_HAVE_POSIX_TIMERS
- */
-#define SUNDIALS_HAVE_POSIX_TIMERS

 /* BUILD CVODE with fused kernel functionality */
 /* #undef SUNDIALS_BUILD_PACKAGE_FUSED_KERNELS */
@@ -89,7 +85,7 @@
 /* #undef SUNDIALS_BUILD_WITH_MONITORING */

 /* BUILD SUNDIALS with profiling functionalities */
-/* #undef SUNDIALS_BUILD_WITH_PROFILING */
+#undef SUNDIALS_BUILD_WITH_PROFILING

 /* ------------------------------------------------------------------
  * SUNDIALS TPL macros
diff --git a/inst/include/sundials/sundials_config.in b/inst/include/sundials/sundials_config.in
index 238200c..a9882cd 100644
--- a/inst/include/sundials/sundials_config.in
+++ b/inst/include/sundials/sundials_config.in
@@ -77,10 +77,6 @@
  */
 #cmakedefine SUNDIALS_USE_GENERIC_MATH

-/* Use POSIX timers if available.
- *     #define SUNDIALS_HAVE_POSIX_TIMERS
- */
-#cmakedefine SUNDIALS_HAVE_POSIX_TIMERS

 /* BUILD CVODE with fused kernel functionality */
 #cmakedefine SUNDIALS_BUILD_PACKAGE_FUSED_KERNELS
@@ -88,8 +84,6 @@
 /* BUILD SUNDIALS with monitoring functionalities */
 #cmakedefine SUNDIALS_BUILD_WITH_MONITORING

-/* BUILD SUNDIALS with profiling functionalities */
-#cmakedefine SUNDIALS_BUILD_WITH_PROFILING

 /* ------------------------------------------------------------------
  * SUNDIALS TPL macros
diff --git a/src/sundials/sundials_profiler.c b/src/sundials/sundials_profiler.c
index d03f9c6..10f25d8 100644
--- a/src/sundials/sundials_profiler.c
+++ b/src/sundials/sundials_profiler.c
@@ -17,16 +17,16 @@
 #if SUNDIALS_MPI_ENABLED
 #include <sundials/sundials_mpi_types.h>
 #include <mpi.h>
-#elif defined(SUNDIALS_HAVE_POSIX_TIMERS)
-/* Minimum POSIX version needed for struct timespec and clock_monotonic */
-#if !defined(_POSIX_C_SOURCE) || (_POSIX_C_SOURCE < 199309L)
-#define _POSIX_C_SOURCE 199309L
 #endif
-#include <time.h>
+
+#if defined(SUNDIALS_HAVE_POSIX_TIMERS)
 #include <stddef.h>
+#include <time.h>
 #include <unistd.h>
+#elif defined(WIN32) || defined(_WIN32)
+#include <windows.h>
 #else
-#error Either MPI_Wtime or clock_getttime is required but neither were found
+#error SUNProfiler needs POSIX or Windows timers
 #endif

 #include <stdio.h>
@@ -39,12 +39,23 @@

 #define SUNDIALS_ROOT_TIMER ((const char*) "From profiler epoch")

+#if defined(SUNDIALS_HAVE_POSIX_TIMERS)
+typedef struct timespec sunTimespec;
+#else
+typedef struct _sunTimespec
+{
+  long int tv_sec;
+  long int tv_nsec;
+} sunTimespec;
+#endif
+
 /* Private functions */
 #if SUNDIALS_MPI_ENABLED
 static int sunCollectTimers(SUNProfiler p);
 #endif
 static void sunPrintTimers(int idx, SUNHashMapKeyValue kv, FILE* fp, void* pvoid);
 static int sunCompareTimes(const void* l, const void* r);
+static int sunclock_gettime_monotonic(sunTimespec* tp);

 /*
   sunTimerStruct.
@@ -53,13 +64,8 @@ static int sunCompareTimes(const void* l, const void* r);

 struct _sunTimerStruct
 {
-#if SUNDIALS_MPI_ENABLED
-  double tic;
-  double toc;
-#else
-  struct timespec* tic;
-  struct timespec* toc;
-#endif
+  sunTimespec* tic;
+  sunTimespec* toc;
   double average;
   double maximum;
   double elapsed;
@@ -70,20 +76,15 @@ typedef struct _sunTimerStruct sunTimerStruct;

 static sunTimerStruct* sunTimerStructNew(void)
 {
-  sunTimerStruct* ts = (sunTimerStruct*) malloc(sizeof(sunTimerStruct));
-#if SUNDIALS_MPI_ENABLED
-  ts->tic = 0.0;
-  ts->toc = 0.0;
-#else
-  ts->tic = (struct timespec *) malloc(sizeof(struct timespec));
-  ts->toc = (struct timespec *) malloc(sizeof(struct timespec));
-  ts->tic->tv_sec = 0;
-  ts->tic->tv_nsec = 0;
-#endif
-  ts->elapsed = 0.0;
-  ts->average = 0.0;
-  ts->maximum = 0.0;
-  ts->count   = 0;
+  sunTimerStruct* ts = (sunTimerStruct*)malloc(sizeof(sunTimerStruct));
+  ts->tic            = (sunTimespec*)malloc(sizeof(sunTimespec));
+  ts->toc            = (sunTimespec*)malloc(sizeof(sunTimespec));
+  ts->tic->tv_sec    = 0;
+  ts->tic->tv_nsec   = 0;
+  ts->elapsed        = 0.0;
+  ts->average        = 0.0;
+  ts->maximum        = 0.0;
+  ts->count          = 0;
   return ts;
 }

@@ -92,35 +93,33 @@ static void sunTimerStructFree(void* TS)
   sunTimerStruct* ts = (sunTimerStruct*) TS;
   if (ts)
   {
-#if !SUNDIALS_MPI_ENABLED
     if (ts->tic) free(ts->tic);
     if (ts->toc) free(ts->toc);
-#endif
     free(ts);
   }
 }

 static void sunStartTiming(sunTimerStruct* entry)
 {
-#if SUNDIALS_MPI_ENABLED
-  entry->tic = MPI_Wtime();
-#else
-  clock_gettime(CLOCK_MONOTONIC, entry->tic);
-#endif
+  sunclock_gettime_monotonic(entry->tic);
 }

 static void sunStopTiming(sunTimerStruct* entry)
 {
-#if SUNDIALS_MPI_ENABLED
-  entry->toc = MPI_Wtime();
-  entry->elapsed += entry->toc - entry->tic;
-#else
-  clock_gettime(CLOCK_MONOTONIC, entry->toc);
-  entry->elapsed +=
-    ((double) (entry->toc->tv_sec - entry->tic->tv_sec) +
-     (double) (entry->toc->tv_nsec - entry->tic->tv_nsec) * 1e-9);
-#endif
-  /* Initialize to total value */
+  long s_difference  = 0;
+  long ns_difference = 0;
+
+  sunclock_gettime_monotonic(entry->toc);
+
+  s_difference  = entry->toc->tv_sec - entry->tic->tv_sec;
+  ns_difference = entry->toc->tv_nsec - entry->tic->tv_nsec;
+  if (ns_difference < 0)
+  {
+    s_difference--;
+    ns_difference = 1000000000 + entry->toc->tv_nsec - entry->tic->tv_nsec;
+  }
+
+  entry->elapsed += ((double)s_difference) + ((double)ns_difference) * 1e-9;
   entry->average = entry->elapsed;
   entry->maximum = entry->elapsed;
 }
@@ -466,3 +465,31 @@ int sunCompareTimes(const void* l, const void* r)
     return(-1);
   return(0);
 }
+
+int sunclock_gettime_monotonic(sunTimespec* ts)
+{
+#if defined(SUNDIALS_HAVE_POSIX_TIMERS)
+  return clock_gettime(CLOCK_MONOTONIC, ts);
+#elif (defined(WIN32) || defined(_WIN32))
+  static LARGE_INTEGER ticks_per_sec;
+  LARGE_INTEGER ticks;
+
+  if (!ticks_per_sec.QuadPart)
+  {
+    QueryPerformanceFrequency(&ticks_per_sec);
+    if (!ticks_per_sec.QuadPart) { return -1; }
+  }
+
+  QueryPerformanceCounter(&ticks);
+
+  /* QueryPerformanceCounter is ticks in microseconds */
+
+  ts->tv_sec  = (long)(ticks.QuadPart / ticks_per_sec.QuadPart);
+  ts->tv_nsec = (long)(((ticks.QuadPart % ticks_per_sec.QuadPart) * 1000000) /
+                       ticks_per_sec.QuadPart);
+
+  return 0;
+#else
+#error SUNProfiler needs POSIX or Windows timers
+#endif
+}
